Here is the improved code:

```python
from backtesting import Strategy
from backtesting.lib import crossover
import pandas as pd
from talib import RSI, MACD

class EmaCrossStrategy(Strategy):
    n1 = 20
    n2 = 50
    stop_loss = 0.02
    take_profit = 0.05

    def init(self):
        self.ema1 = self.I(lambda x: pd.Series(x).ewm(span=self.n1).mean(), self.data.Close)
        self.ema2 = self.I(lambda x: pd.Series(x).ewm(span=self.n2).mean(), self.data.Close)
        self.rsi = self.I(lambda x: RSI(x, timeperiod=14), self.data.Close)
        self.macd = self.I(lambda x: MACD(x, fastperiod=12, slowperiod=26, signalperiod=9)[0], self.data.Close)

    def next(self):
        if crossover(self.ema1, self.ema2) and self.rsi[-1] < 30 and self.macd[-1] > 0:
            self.buy(sl=self.data.Close[-1]*(1-self.stop_loss), tp=self.data.Close[-1]*(1+self.take_profit))
        elif crossover(self.ema2, self.ema1) and self.rsi[-1] > 70 and self.macd[-1] < 0:
            self.sell(sl=self.data.Close[-1]*(1+self.stop_loss), tp=self.data.Close[-1]*(1-self.take_profit))
```

In this improved code:

- The periods of the EMAs have been reduced to 20 and 50, which should make the bot more responsive to market changes.
- The RSI and MACD indicators have been added to the strategy. The bot will now only enter a trade if the RSI is below 30 (for a buy) or above 70 (for a sell), and the MACD is positive (for a buy) or negative (for a sell). This should help to confirm the signals generated by the EMA crossover.
- Stop loss and take profit levels have been set at 2% and 5% respectively. This should help to protect your capital and lock in profits.
- The amount risked per trade has been reduced by lowering the stop loss level. This should help to reduce the bot's maximum drawdown.